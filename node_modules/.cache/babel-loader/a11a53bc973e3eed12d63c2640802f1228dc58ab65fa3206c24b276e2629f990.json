{"ast":null,"code":"import _regeneratorRuntime from\"/Users/chukwumaibezim/IdeaProjects/NetflixClone/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/chukwumaibezim/IdeaProjects/NetflixClone/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/chukwumaibezim/IdeaProjects/NetflixClone/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import'./Row.css';import axios from\"./axios\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,_ref$isLargeRow=_ref.isLargeRow,isLargeRow=_ref$isLargeRow===void 0?false:_ref$isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var base_url=\"https://image.tmdb.org/t/p/original/\";useEffect(function(){var _fetchData;function fetchData(){return(_fetchData=_fetchData||_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var request;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}},_callee);}))).apply(this,arguments);}fetchData();},[fetchUrl]);console.log(movies);return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return(isLargeRow&&movie.poster_path||!isLargeRow&&movie.poster_path)&&/*#__PURE__*/_jsx(\"img\",{className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})})]});}export default Row;","map":{"version":3,"names":["React","useEffect","useState","axios","jsx","_jsx","jsxs","_jsxs","Row","_ref","title","fetchUrl","_ref$isLargeRow","isLargeRow","_useState","_useState2","_slicedToArray","movies","setMovies","base_url","_fetchData","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","wrap","_callee$","_context","prev","next","get","sent","data","results","abrupt","stop","apply","arguments","console","log","className","children","map","movie","poster_path","concat","src","backdrop_path","alt","name","id"],"sources":["/Users/chukwumaibezim/IdeaProjects/NetflixClone/frontend/src/features/Row.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './Row.css'\nimport axios from \"./axios\"\n\nfunction Row({title , fetchUrl, isLargeRow = false}) {\n    const [movies,setMovies] = useState([]);\n\n    const base_url= \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    }, [fetchUrl]);\n\n    console.log(movies)\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n                {movies.map((movie) => (\n                    ((isLargeRow && movie.poster_path) ||\n                        (!isLargeRow && movie.poster_path)) && (\n                        <img\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                            key={movie.id}\n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\n                            }`}\n                            alt={movie.name}\n                        />\n                    )\n\n\n                ))}\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Row"],"mappings":"0bAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,MAAO,CAAAC,KAAK,KAAM,SAAS,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE3B,QAAS,CAAAC,GAAGA,CAAAC,IAAA,CAAyC,IAAvC,CAAAC,KAAK,CAAAD,IAAA,CAALC,KAAK,CAAGC,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CAAAC,eAAA,CAAAH,IAAA,CAAEI,UAAU,CAAVA,UAAU,CAAAD,eAAA,UAAG,KAAK,CAAAA,eAAA,CAC9C,IAAAE,SAAA,CAA2BZ,QAAQ,CAAC,EAAE,CAAC,CAAAa,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAhCG,MAAM,CAAAF,UAAA,IAACG,SAAS,CAAAH,UAAA,IAEvB,GAAM,CAAAI,QAAQ,CAAE,sCAAsC,CAEtDlB,SAAS,CAAC,UAAM,KAAAmB,UAAA,SACG,CAAAC,SAASA,CAAA,SAAAD,UAAA,CAAAA,UAAA,EAAAE,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAxB,SAAAC,QAAA,MAAAC,OAAA,QAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,SAC0B,CAAA5B,KAAK,CAAC6B,GAAG,CAACrB,QAAQ,CAAC,QAAnCe,OAAO,CAAAG,QAAA,CAAAI,IAAA,CACbf,SAAS,CAACQ,OAAO,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,OAAAN,QAAA,CAAAO,MAAA,UACzBV,OAAO,0BAAAG,QAAA,CAAAQ,IAAA,MAAAZ,OAAA,GACjB,IAAAa,KAAA,MAAAC,SAAA,GAEDlB,SAAS,CAAC,CAAC,CACf,CAAC,CAAE,CAACV,QAAQ,CAAC,CAAC,CAEd6B,OAAO,CAACC,GAAG,CAACxB,MAAM,CAAC,CAEnB,mBACIV,KAAA,QAAKmC,SAAS,CAAC,KAAK,CAAAC,QAAA,eAChBtC,IAAA,OAAAsC,QAAA,CAAKjC,KAAK,CAAK,CAAC,cAEhBL,IAAA,QAAKqC,SAAS,CAAC,cAAc,CAAAC,QAAA,CACxB1B,MAAM,CAAC2B,GAAG,CAAC,SAACC,KAAK,QACd,CAAEhC,UAAU,EAAIgC,KAAK,CAACC,WAAW,EAC5B,CAACjC,UAAU,EAAIgC,KAAK,CAACC,WAAY,gBAClCzC,IAAA,QACIqC,SAAS,gBAAAK,MAAA,CAAiBlC,UAAU,EAAI,kBAAkB,CAAG,CAE7DmC,GAAG,IAAAD,MAAA,CAAK5B,QAAQ,EAAA4B,MAAA,CAAGlC,UAAU,CAAGgC,KAAK,CAACC,WAAW,CAAGD,KAAK,CAACI,aAAa,CACpE,CACHC,GAAG,CAAEL,KAAK,CAACM,IAAK,EAHXN,KAAK,CAACO,EAId,CACJ,EAGJ,CAAC,CAED,CAAC,EAEL,CAAC,CAEd,CAEA,cAAe,CAAA5C,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}